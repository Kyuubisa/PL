<?xml version="1.0" encoding="utf-8" ?>
<resources>
  <string name="Ch1_1">
    \tЯзык программирования выполняет две взаимосвязанные функции:
    определяет порядок действий, которые нужно выполнить,
    и задаёт набор понятий, которые реализуют возможности выполнения этой программы.\n
    \tАлгоритм — порядок действий, необходимых для получения результата.
    \n\n
    <i>
    \n/* Объявление переменных, присваивание, вывод на экран, комментарии*/
    \nusing System; //пространство имен
    \nclass Program
    \n{
    \n\tpublic static void Main()
    \n\t{
    \n\t//текст программы
    \n\t\tConsole.WriteLine("начало");
    \n\t\tint i; //объявление переменной
    \n\t\tint j,k; //множественное объявление
    \n\t\ti=j=2; //присваивание
    \n\t\tdouble d=0.781; //объявление с инициализацией
    \n\t\tchar f=\'a\'; //объявление с инициализацией
    \n\t\tConsole.WriteLine(i); //вывод значения i
    \n\t\tConsole.WriteLine(\"i=\"+i); //вывод i с надписью
    \n\t\tConsole.WriteLine(); //вывод пустой строки
    \n\t\tConsole.WriteLine(j+\" \"+d+\" \"+k); //последовательный вывод через пробел
    \n\t\tConsole.WriteLine(j+d+k); //вывод суммы
    \n\t\tConsole.WriteLine(\"\\n\"); //вывод пустой строки
    \n\t\tConsole.WriteLine(" \\', \\\", \\\\ "); //вывод служебных символов \', \", \\
    \n\t} //конец Main
    \n} //конец Program
    </i>
    \n\n
    \n\tАлгоритм заключён в фигурные скобки <b>{}</b> после имени <b>Main()</b>.
    Круглые скобки показывают, что это — <b>программный блок</b>, называемый <b>функцией</b> (методом), 
    в данном случае с именем <b>Main</b>. 
    Обычно программа состоит не из одной функции, но <b>Main</b> (главная) <b>присутствует всегда</b>, 
    с неё начинается выполнение программы. 
    Блок <b>Main</b> обрамляется с помощью внешних фигурных скобок блоком <b>Program</b>. 
    Имя <b>Main</b>, а также модификаторы <b>public static void</b> и<b>class</b> обязательны, имя <b>Program</b> выбрано произвольно.
    \n\t<u>Отдельная фраза алгоритма (выражение) всегда заканчивается знаком <b>;</b>.</u>
    \n\tПервая строка алгоритма выводит на экран монитора символьную строку (текст, заключённый в кавычки). 
    Следующие две строки называются <b>объявлением переменных</b>. 
    Обозначения <b>i, j, k</b> являются <b>именами переменных (идентификаторами)</b>. 
    Слово перед именами переменных определяет <b>тип данных</b> и называется <b>спецификатором типа</b>, 
    в частности, <b>int</b> обозначает, что <b>i, j, k</b> — целые числа. 
    Далее <b>i</b> и <b>j</b> присваивается значение 2, а <b>k</b> — 18.
    \n\tНепосредственное присваивание значения переменной при объявлении называется <b>инициализацией</b>, 
    что и демонстрируют объявления <i>double d=0.781;</i> (переменной <b>d</b> — числа с плавающей точкой типа <b>double</b>) 
    и <i>char f=\'a\';</i> (символьной переменной <b>f</b> — типа <b>char</b>.
    \n\tОдин символ заключается в одинарные кавычки <b>\'</b>, строка символов — в двойные <b>\"</b>.
    \n\tВыражение <i>Console.WriteLine(i);</i> выводит на экран значение переменной <b>i</b>. 
    Следующая строка <i>Console.WriteLine(\"i=\"+i);</i> последовательно выводит на экран текст <b>i=</b> и значение переменной <b>i</b>. 
    Три рассмотренных выше вывода включают перевод следующего вывода на новую строку. 
    Вывод <i>Console.Write(\"j=\");</i> такого вывода не предусматривает, 
    поэтому выражение <i>Console.WriteLine(j);</i> записывает на экран значение <b>j</b> за текстом <b>j=</b>. 
    Выражение <i>Console.WriteLine(\"f=\"+f);</i> выводит на экран имя и значение символьной переменной <b>j</b>. 
    Далее следуют вывод на экран пустой строки <i>Console.WriteLine();</i> 
    и последовательный вывод значений <b>j</b>, <b>d</b> и <b>k</b> <i>Console.WriteLine(j+\" \"+d+\" \"+k);</i>.
    \n\t<u>Пробел является символом.</u>
    \n\tПри выводе нескольких значений переменных в одной строке следует быть внимательным, 
    так как, например, <i>Console.WriteLine(j+d+k);</i> выведет на экран сумму значений <b>j</b>, <b>d</b> и <b>k</b>, 
    причём значение суммы после вывода будет забыто, так как оно не было присвоено никакой переменной. 
    Управляющая последовательность <b>\\n</b> даёт команду начать следующий за ней вывод с новой строки. 
    Используемые символы <b>\"</b>, <b>\'</b> и <b>\\</b> являются служебными и на экран не выводятся. 
    Если их необходимо вывести, то перед таким символом следует поставить <b>\\</b> (обратный слеш). 
    Соответствующие примеры приведены в программе. 
    Пояснения в программе оформляются в виде комментария. Любой текст после символов <b>//</b> и до конца строки компилятором игнорируется. 
    Использование обеих разновидностей комментария продемонстрировано в программе. 
    Открывающая программу строка <i>using System;</i> показывает, что используется пространство имён <b>System</b> из встроенной библиотеки C#. 
    Функции <b>WriteLine</b> и <b>Write</b> помещены в раздел <b>Console</b>.
    \n
    \n\tПрограмма должна быть написана так, чтобы она была понятна и удобна для пользователя.
    \n\tКаждая программа должна начинаться с комментария, сообщающего название файла, в котором она хранится, и её назначение.
    \n\tКомментарий внутри программы должен помогать её пониманию и содержать заметки разработчика.
    \n\tПрограмма должна быть разделена на логические блоки отступами, пробелами, комментариями.
    \n\tИдентификаторы должны быть осмысленными и соответствовать общепринятым математическим обозначениям.
    \n\tБуквы i, j, k, l, m, n желательно использовать для обозначения целых чисел.
    \n\tХотя длина строки в C# не лимитирована, текст программы не должен выходить за пределы ширины экрана для того, 
    чтобы его было удобно читать и распечатать.
    \n\n\n
  </string>
  <string name="Ch1_2">
    \tТекст разработанной программы необходимо преобразовать в набор машинных кодов, которые будут управлять компьютером. 
    Эту операцию выполняет программа, называемая компилятором.
    \n\tДля того чтобы остановка экрана осуществлялась при любом способе запуска, следует предусмотреть это при разработке программы. 
    Остановка экрана <i>Console.ReadKey();</i> останавливает исполнение программы и ждёт ввода символа с клавиатуры. 
    Символ в виде кода помещается в буфер и при нажатии Enter передаётся в программу.
    \n\tМножество символов языка C# включает <b>прописные</b> и <b>строчные буквы латинского алфавита</b>, 
    <b>цифры</b> и <b>знаки</b>. Буквы и цифры используются для формирования идентификаторов, констант, ключевых слов.
    \n\t<u>С# чувствителен к регистру.</u>
    \n\tСовокупность ключевых слов составляет словарь языка. 
    Все зарезервированные <b>ключевые слова содержат только строчные буквы</b> (символы нижнего регистра) и написаны <b>на английском языке</b> (в том числе с сокращениями).
    \n\t<u>Ключевые слова запрещено использовать в любом другом качестве.</u> 
    Нелатинский алфавит допускается только в комментариях, внутри символьных строк между двойными кавычками и 
    для символьных переменных между одинарными кавычками.
    \n\t<b>Пробел</b> используется не только в качестве разделителя лексем языка в тексте программы, но и как <b>символьный знак</b>. 
    Компилятор не реагирует на дополнительные пробелы, поэтому их можно использовать для придания тексту наглядности.
    \n\n\t
    <u>Ключевые слова C#</u>: abstract, ascending, as, base, bool, break, byte, case, catch, char,
    checked, class, const, continue, decimal, default, delegate, descending, do, double,
    dynamic, else, enum, equals, event, explicit, extern, false, finally, fixed,
    float, for, foreach, from, goto, group, if, implicit, in, int,
    into, interface, internal, is, join, let, lock, long, namespace, new,
    null, object, on, operator, orderby, out, override, params, partial, private,
    protected, public, readonly, ref, return, sbyte, sealed, select, short, sizeof,
    stackalloc, static, string, struct, switch, this, throw, true, try, typeof,
    uint, ulong, unchecked, unsafe, ushort, using, value, var, virtual, volatile, void, where, while.
    \n\n\tC# использует операторы, то есть знаки арифметических и логических операций.
    \n\tАрифметическое сложение и унарный плюс: <b>+</b>; 
    арифметическое вычитание и унарный минус: <b>-</b>; 
    умножение: <b>*</b>; 
    деление: <b>/</b>; 
    вычисление остатка: <b>%</b>; 
    присваивание: <b>=</b>; 
    декремент: <b>--</b>; 
    инкремент: <b>++</b>;
    доступ: <b>.</b>;
    проверка на равенство: равно <b>==</b>, не равно <b>!=</b>; 
    проверка отношения: больше <b>&gt;</b>, меньше <b>&lt;</b>, больше или равно <b>&gt;=</b>, меньше или равно <b>&lt;=</b>; 
    отрицание (не): <b>!</b>; 
    тернарная: <b>?:</b>; 
    лямбда-выражение: <b>=&gt;</b>; 
    поразрядные операторы: исключающее <b>ИЛИ (XOR)</b> <b>^</b>, логическое <b>ИЛИ (OR)</b> <b>|</b>, логическое <b>И (AND)</b> <b>&amp;</b>, дополнение до <b>1</b> <b>~</b> (тильда), сдвиг по разрядам <b>&lt;&lt;</b> <b>&gt;&gt;</b>; 
    проверка условия <b>И (AND) &amp;&amp; ИЛИ (OR) ||</b>; 
    скобки: <b>( ), { }, [ ], &lt; &gt;</b>.
    <!--отсюда переместить в новый файл-->
    \n
    \n\tОперация, определяемая оператором % (вычисление остатка, целочисленное деление, деление по модулю), 
    вычисляет целый остаток от деления двух чисел. 
    В C# оператор % может быть применён к целым числам и к числам с плавающей точкой. Например: 
    7/3=2 (дробная часть отбрасывается), 7%3=1, 7.0/3.0=2.3333333, 7.0%3.0=1.
    \n
    \n\t<u>Знаки:</u> двойные и одинарные кавычки <b>\" \'</b>, знаки препинания <b>. , : ;</b>, знак обратный слеш <b>\\</b>, знак подчёркивания <b>_</b>, пробел  .
  </string>
</resources>
